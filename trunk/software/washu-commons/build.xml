<?xml version="1.0" encoding="UTF-8"?>
<project name="washu-commons" default="dist" xmlns:ivy="antlib:org.apache.ivy.ant" basedir=".">

    <import file="ivy-targets.xml" />

<!--PROPERTIES -->

    <target name="postResolve" depends="resolve">
        <taskdef resource="net/sf/antcontrib/antcontrib.properties">
            <classpath>
                <fileset dir="${basedir}/lib">
                    <include name="ant-contrib*.jar" />
                </fileset>
            </classpath>
        </taskdef>
        <taskdef classpathref="junit.classpath" resource="tasks.properties" />
    </target>

    <property file="${basedir}/conf/washu-commons.properties"/>
    <property file="${basedir}/conf/commonpackage.properties"/>
    <property file="${basedir}/conf/mail.properties"></property>
    <property file="${basedir}/src/main/resources/DAO.properties"/>

	<property name="src.dir" value="${basedir}/src/main/java" />
	<property name="dist.dir" value="${basedir}/dist" />
	<property name="lib.dir" value="${basedir}/lib" />
	<property name="local-ivy-repo.dir" value="${basedir}/../local-ivy-repo"/>

    <!--define require dir and Properties -->

    <property name="src.dir" value="${basedir}/src/main/java" />
    <property name="res.dir" value="${basedir}/src/main/resources" />


    <property name="project.test" value="${basedir}/src/test/"/>
    <property file="${project.test}/resources/junitConf.properties"/>

    <property name="target.dir" value="${basedir}/target" />
    <property name="extra_lib.dir" value="${basedir}/extra_lib" />
    <property name="generateforce" value="true" />
    <property name="junit.dir" value="${basedir}/target/junit" />
    <property name="junit.report.dir" value="${junit.dir}/reports" />
    <property name="junit.classes.dir" value="${junit.dir}/classes" />
    <property name="code.coverage.report.dir" value="${junit.dir}/coverage-reports" />
    <property name="instrumented.classes.dir" value="${target.dir}/instrument" />
    <property name="cobertura.dir" value="${basedir}/src/cobertura"/>
    <property name="metadatatest.dir" value="/conf/metadataTestReport" />
    <property name="metadatatest.report.dir" value="${metadatatest.dir}/Report" />
    <property name="oracle.driver.string" value="oracle.jdbc.driver.OracleDriver" />
    <property name="mysql.driver.string" value="org.gjt.mm.mysql.Driver" />

    <property name="mysql.driver.string" value="com.mysql.jdbc.Driver" />
    <property name="oracle.driver.string" value="oracle.jdbc.driver.OracleDriver"/>
    <property name="oracle.dialect.string" value="org.hibernate.dialect.Oracle9Dialect" />
    <property name="mysql.dialect.string" value="org.hibernate.dialect.MySQLDialect" />
    <property file="${basedir}/src/test/resources/DAOInstall.properties"/>
    <property name="mysql.dao.prop.filename" value="MySQLDAOProperties.xml" />
    <property name="oracle.dao.prop.filename" value="OracleDAOProperties.xml" />

    <property name="cobertura.location" value="${basedir}"/>
    <path id="cobertura.classpath">
        <fileset dir="${cobertura.dir}">
            <include name="cobertura.jar" />
            <include name="**/*.jar" />
        </fileset>
	</path>

    <!-- SVN URL -->
    <loadfile property="dist.revision" srcFile="./.svn/entries">
        <filterchain>
            <headfilter lines="1" skip="4"/>
        </filterchain>
    </loadfile>
    <property name="dist.revision" value="${dist.revision}" />

<!--TARGETS-->


	<target name="clean">
        <delete dir="${target.dir}" failonerror="false" />
        <delete dir="${junit.dir}" failonerror="false"/>
        <delete dir="${junit.classes.dir}" failonerror="false"/>
	</target>


	<path id="compile.classpath">
		<fileset dir="${lib.dir}">
            <include name="*.jar" />
		</fileset>
	</path>

    <target name="init">
        <delete dir="${target.dir}" failonerror="false"/>
        <mkdir dir="${target.dir}/classes" />
        <delete dir="${junit.dir}" failonerror="false"/>
        <mkdir dir="${junit.dir}" />
        <delete dir="${junit.classes.dir}" failonerror="false"/>
        <mkdir dir="${junit.classes.dir}" />
        <delete dir="${applet.dir}" failonerror="false"/>
        <mkdir dir="${applet.dir}" />
    </target>

	<target name="compile" depends="clean, init">
        <javac srcdir="${src.dir}"
               destdir="${target.dir}/classes"
               fork="true"
               memoryMaximumSize="1200m"
               includes="**/*.*"
               debug="on"
               deprecation="false"
               classpathref="compile.classpath"
               failonerror="true"
               nowarn="on"
               target="1.5" />

        <copy todir="${target.dir}/classes">
			<fileset dir="${src.dir}" includes="**/*.hbm.xml" />
		</copy>

        <copy todir="${target.dir}/classes">
            <fileset dir="${src.dir}">
                <include name="**/*.properties" />
                <include name="**/*.xml" />
                <include name="**/*.hbm.xml" />
                <include name="**/*.ser" />
                <exclude name="**/cab2b.properties"/>
            </fileset>
        </copy>

        <copy file="${basedir}/conf/ExceptionFormatter.properties" todir="${target.dir}/classes" verbose="true"/>
        <copy todir="${target.dir}/classes" verbose="true">
            <fileset dir="${basedir}/src/">
                <include name="Tag.properties" />
                <include name="CDEConfig.xml" />
                <include name="DataTypeConfigurations.xml" />
            </fileset>
        </copy>

	</target>

	<target name="dist" depends="postResolve, build.jar, build.src.zip" />

	<target name="build.jar" depends="compile">
		<tstamp />
		<jar jarfile="${local-ivy-repo.dir}/washu-commons.jar" basedir="${target.dir}/classes">
			<manifest>
				<section name="${wc.jar.details}">
					<attribute name="Version" value="${wc.jar.version}"/>
					<attribute name="Built-By" value="${wc.jar.creator}" />
					<attribute name="Build-on" value="${TODAY} ${TSTAMP}" />
					<attribute name="SVN-URL" value="${dist.revision}" />
			  	</section>
			</manifest>
		</jar>
        <antcall target="AppletJAR" />
        <copy file="${local-ivy-repo.dir}/washu-commons.jar" todir="${dist.dir}" />
        <copy file="${dist.dir}/TreeApplet.jar" todir="${local-ivy-repo.dir}" />
	</target>

	<target name="build.src.zip">
		<mkdir dir="${target.dir}/sources" />
        <copy todir="${target.dir}/sources">
			<fileset dir="${src.dir}" includes="**/*" />
		</copy>
        <jar jarfile="${local-ivy-repo.dir}/washu-commons-src.jar" basedir="${target.dir}/sources">
            <manifest>
                <section name="${wc.jar.details}">
                    <attribute name="Version" value="${wc.jar.version}"/>
                    <attribute name="Built-By" value="${wc.jar.creator}" />
                    <attribute name="Build-on" value="${TODAY} ${TSTAMP}" />
                    <attribute name="SVN-URL" value="${dist.revision}" />
                  </section>
            </manifest>
        </jar>
        <copy file="${local-ivy-repo.dir}/washu-commons-src.jar" todir="${dist.dir}" />
	</target>

    <target name="testSendMailWithAuthentication" depends="compile" description="Sends the Mail after authentication of the sender">
        <java classname="edu.wustl.common.util.global.SendEmail">
            <arg id="host" value="${email.mailServer}"/>
            <arg id="from" value="${email.sendEmailFrom.emailAddress}"/>
            <arg id="passwd" value="${email.sendEmailFrom.emailPassword}"/>
            <arg id="toAddress1" value="${email.sendEmailTo.emailAddress1}"/>
            <arg id="toAddress2" value="${email.sendEmailTo.emailAddress2}"/>

            <classpath refid="compile.classpath">
            </classpath>
        </java>
	</target>

<!---->

	<!--define require dir and Properties -->


	<path id="app.classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="xdoclet.classpath">
		<path refid="app.classpath" />
		<pathelement location="${extra_lib.dir}/commons-net-1.2.2.jar" />
		<pathelement location="${extra_lib.dir}/hibernate-tools.jar" />
		<pathelement location="${extra_lib.dir}/servlet-api.jar" />
		<pathelement location="${extra_lib.dir}/xdoclet-1.2.3.jar" />
		<pathelement location="${extra_lib.dir}/xdoclet-hibernate-module-1.2.jar" />
		<pathelement location="${extra_lib.dir}/xdoclet-xdoclet-module-1.2.jar" />
		<pathelement location="${extra_lib.dir}/xerces.jar" />
		<pathelement location="${extra_lib.dir}/xjavadoc-1.1-j5-v4.jar" />
		<pathelement location="${extra_lib.dir}/xsdlib.jar" />
		<pathelement location="${project.test}/java" />
	</path>

	<path id="junit.classpath">
        <fileset dir="${basedir}/lib">
            <include name="cobertura*.jar" />
            <include name="jakarta-oro*.jar" />
            <include name="asm-2.2*.jar" />
            <include name="log4j*.jar" />
        </fileset>
	</path>

	<target name="compileTest">
        <javac destdir="${junit.classes.dir}" includes="**/*.*" debug="on" includeAntRuntime="false" target="1.5">
            <src path="${project.test}/java" />
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="*.jar" />
                </fileset>
                <pathelement location="${target.dir}/classes" />
            </classpath>
        </javac>
        <copy todir="${junit.classes.dir}">
            <fileset dir="${project.test}/java">
                <include name="**/*.properties" />
                <include name="**/*.xml" />
                <include name="**/*.hbm.xml" />
                <include name="**/*.ser" />
            </fileset>
            <fileset dir="${project.test}/resources">
                <include name="**/*.properties" />
                <include name="**/*.xml" />
                <include name="**/*.hbm.xml" />
                <include name="**/*.ser" />
            </fileset>
        </copy>
        <antcall target="update:hibernate-cfg"></antcall>
    </target>

	<!--Create zip file of common package source files.-->
	<target name="build_code_zip" depends="compile">
		<delete>
			<fileset dir="${dist.dir}" includes="**/*" />
		</delete>
		<zip destfile="${dist.dir}/commonpackage-${cp.jar.version}-src.zip">
			<fileset dir="${src.dir}" includes="**/*" />
		</zip>
	</target>

	<target name="build_jar" depends="build_code_zip, compile">
		<tstamp />
		<jar taskname="build_jar" jarfile="${dist.dir}/commonpackage-${cp.jar.version}.jar">
			<fileset dir="${target.dir}/classes">
				<include name="**/*" />
				<exclude name="**/SqlGeneratorTestCase*" />
				<exclude name="**/ExpressionTestCases*" />
				<exclude name="**/JoinGraphTestCase*" />
				<exclude name="**/CSMGroupConf.xml" />
				<exclude name="**/Factory.xml" />
				<exclude name="**/ApplicationResources.properties" />
			</fileset>
			<fileset dir="${basedir}" includes="**/ExceptionFormatter.properties" />
			<manifest>
				<section name="${cp.jar.details}">
				    <attribute name="Version" value="${cp.jar.version}"/>
					<attribute name="Built-By" value="${cp.jar.creator}" />
					<attribute name="Build-on" value="${TODAY} ${TSTAMP}" />
			   	   	<attribute name="SVN-URL" value="${dist.revision}" />
			   	</section>
			</manifest>
		</jar>
	</target>

	<target name="initJUnit">
		<delete failonerror="false">
			<fileset dir="${junit.report.dir}" includes="**/*" />
		</delete>
		<mkdir dir="${target.dir}/reports/TestReports" />
	</target>

	<!-- copy all jar files to junit/lib folder-->
	<target name="copyJarsToJUnitLib">
		<mkdir dir="${junit.dir}/lib" />
		<copy todir="${junit.dir}/lib">
			<fileset dir="${basedir}/lib">
				<include name="**/*.jar" />
			</fileset>
		</copy>
		<copy todir="${junit.dir}/lib" file="${dist.dir}/commonpackage.jar" failonerror="false"/>
	</target>

	<target name="createJunitReport" >
		<junitreport todir="${target.dir}/reports/TestReports">
			<fileset dir="${target.dir}/reports/TestReports">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${target.dir}/reports/TestReports" />
		</junitreport>
	</target>


	<target name="runJUnitTests" depends="build_jar, compileTest, copyJarsToJUnitLib">
		<antcall target="initJUnit"/>
		<junit printsummary="yes" haltonerror="no" haltonfailure="no" fork="yes">
			<formatter type="xml" />
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/cobertura.ser" />

			<batchtest todir="${target.dir}/reports/TestReports">
      			<fileset dir="${project.test}/java">
					<include name="**/TestAll.java"/>
			    </fileset>
			</batchtest>
            <batchtest fork="yes" todir="${target.dir}/reports/TestReports">
                <fileset dir="${project.test}/java">
                    <include name="**/DAOTestSuite.java" />
                </fileset>
            </batchtest>

			<classpath>
				<pathelement location="${project.test}/java" />
				<pathelement location="${junit.classes.dir}" />
				<pathelement location="${target.dir}/classes" />
				<fileset dir="${junit.dir}/lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</junit>
		<antcall target="createJunitReport" />
	</target>

	<target name="junitForCobertura" depends="compileTest,copyJarsToJUnitLib">
			<antcall target="initJUnit"/>
			<junit printsummary="yes" haltonerror="no" haltonfailure="no" fork="yes">
				<formatter type="xml" />
				<sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/cobertura.ser" />
				<batchtest todir="${target.dir}/reports/TestReports">
	      			<fileset dir="${project.test}/java">
						<include name="**/TestAll.java"/>
				    </fileset>
				</batchtest>

                <classpath location="${instrumented.classes.dir}" />
				<classpath location="${target.dir}/classes" />

				<classpath>
					<pathelement location="${junit.classes.dir}" />
					<pathelement location="${cobertura.dir}/cobertura.jar" />
					<fileset dir="${junit.dir}/lib">
						<include name="*.jar" />
						<exclude name="inscommonpackage.jar"/>
						<exclude name="commonpackage-1.1.5.jar"/>
					</fileset>

				</classpath>
			</junit>
			<antcall target="createJunitReport" />
		</target>

	<target name="create_instrumented_jar">
		<delete file="${dist.dir}/inscommonpackage.jar" failonerror="false"/>
		<jar taskname="build_jar" jarfile="${dist.dir}/inscommonpackage.jar">
			<fileset dir="${instrumented.classes.dir}">
				<include name="**/*" />
			</fileset>
			<fileset dir="${basedir}" includes="**/ExceptionFormatter.properties" />
			<manifest>
				<attribute name="Built-At-Time" value="${TODAY} ${TSTAMP}" />
			</manifest>
		</jar>
	</target>

	<!-- Instrument all classes-->
	<target name="instrument">
		<mkdir dir="${code.coverage.report.dir}" />
		<mkdir dir="${instrumented.classes.dir}" />
		<cobertura-instrument todir="${instrumented.classes.dir}" >
            <classpath>
                <fileset dir="${basedir}/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
			<ignore regex="org.apache.log4j.*" />
			<fileset dir="${target.dir}/classes">
				<include name="**/*.class" />
				<exclude name="**/*Test.class" />
				<exclude name="**/Mock*.class" />
			</fileset>
		</cobertura-instrument>
		<copy todir="${instrumented.classes.dir}">
			<fileset dir="${src.dir}">
				<include name="**/*.properties" />
				<include name="**/*.xml" />
				<include name="**/*.hbm.xml" />
				<include name="**/*.ser" />
				<exclude name="**/cab2b.properties"/>
			</fileset>
		</copy>
		<antcall target="create_instrumented_jar" />
		<delete file="${dist.dir}/commonpackage.jar" failonerror="false"/>
		<copy todir="${junit.dir}/lib" file="${dist.dir}/inscommonpackage.jar"/>
	</target>

	<!-- Target to generate cobertura coverage report-->
	<target name="cobertura_report">
		<cobertura-report srcdir="${src.dir}" destdir="${code.coverage.report.dir}" format="xml" />
		<delete file="${instrumented.classes.dir}/cobertura.ser" />
	</target>

	<!-- Target to run junit test cases and generate cobertura coverage report-->
	<target name="run_nightly_build" depends="compile,databasSetup">
		<antcall target="instrument" />
		<antcall target="junitForCobertura" />
		<antcall target="cobertura_report" />
	</target>

	<target name="build_exception_jar" depends="compile">
			<tstamp />
			<jar taskname="build_jar" jarfile="${dist.dir}/commonpkgexcepion.jar">
				<fileset dir="${target.dir}/classes">
					<include name="**/edu/wustl/common/exception/*" />
				</fileset>
				<manifest>
					<attribute name="Built-At-Time" value="${TODAY} ${TSTAMP}" />
				</manifest>
			</jar>
	</target>

	<property name="applet.dir" value="${target.dir}/Applet" />
	<!-- Compile all files, generated and hand-written -->
		<target name="applet_compile" depends="init">
			<delete>
				<fileset dir="${applet.dir}">
					<exclude name="**/CVS*" />
					<exclude name="**/java.policy.applet*" />
				</fileset>
			</delete>

			<javac destdir="${applet.dir}" includeAntRuntime="false" fork="yes" compiler="javac1.5">
				<src path="${src.dir}" />

				<include name="**/edu/wustl/common/tree/*.java" />
				<include name="**/edu/wustl/common/treeApplet/*.java" />
				<classpath>
					<fileset dir="${lib.dir}">
						<include name="*.jar" />
					</fileset>
				</classpath>
			</javac>
		</target>

		<!-- Create the Applet JAR Begins-->
		<target name="AppletJAR" depends="applet_compile">

			<delete>
				<fileset dir="${applet.dir}">
					<include name="**/*.jar" />
				</fileset>
			</delete>

			<copy todir="${applet.dir}/images">
				<fileset dir="${res.dir}/images">
					<include name="**/*" />
				</fileset>
			</copy>

			<jar taskname="buildJar" jarfile="${dist.dir}/TreeApplet.jar">
				<manifest>
					<attribute name="Class-Path" value="swingx-2006_10_08.jar" />
				</manifest>
				<fileset dir="${applet.dir}">
					<exclude name="**/CVS*" />
					<exclude name="**/java.policy.applet*" />
				</fileset>
			</jar>
		</target>
		<!-- Create the Applet JAR Ends-->

		<target name="databasSetup">
			<if>
				<equals arg1="mysql" arg2="${database.type}"/>
				<then>
					<antcall target="databasSetup_mysql"/>
				</then>
				<elseif>
					<equals arg1="oracle" arg2="${database.type}"/>
					<then>
						<antcall target="databasSetup_oracle"/>
					</then>
				</elseif>
			</if>
		</target>

		<target name="databasSetup_mysql">
			<echo message="Database set up for mysql..."/>
			<sql driver="${mysql.driver.string}" url="jdbc:mysql://${database.host}:${database.port}/${database.name}" userid="${database.username}" password="${database.password}" >
				<transaction src="/db/MySQL/createUser.sql" />
				<transaction>commit;</transaction>
				<classpath>
					<fileset dir="${lib.dir}">
						<include name="*.jar" />
					</fileset>
				</classpath>
			</sql>
		</target>

		<target name="databasSetup_oracle">
			<sql driver="${oracle.driver.string}" url="jdbc:oracle:thin:@${database.host}:${database.port}:${database.name}" userid="${database.username}" password="${database.password}" rdbms="oracle">
				<transaction src="/db/Oracle/createUser.sql" />
				<transaction>commit;</transaction>
				<classpath>
					<fileset dir="${lib.dir}">
						<include name="*.jar" />
					</fileset>
				</classpath>
			</sql>
		</target>


    <!--DAO-->

    <target name="update:hibernate-cfg">
        <if>
            <equals arg1="mysql" arg2="${database.type}"/>
            <then>
                <antcall target="update:hibernate-cfg-mysql"/>
                <replace file="${junit.classes.dir}/ApplicationDAOProperties.xml">
                    <replacefilter token="${oracle.dao.prop.filename}" value="${mysql.dao.prop.filename}"/>
                </replace>
            </then>
            <elseif>
                <equals arg1="oracle" arg2="${database.type}"/>
                <then>
                    <antcall target="update:hibernate-cfg-oracle"/>
                    <replace file="${junit.classes.dir}/ApplicationDAOProperties.xml">
                        <replacefilter token="${mysql.dao.prop.filename}" value="${oracle.dao.prop.filename}"/>
                    </replace>
                </then>
            </elseif>
            <else>
                <echo message="DATABASE INITIALIZATION FAILED PLEASE CHECK DATABASE.TYPE PROPERTY" level="error"/>
            </else>
        </if>
    </target>

    <target name="update:hibernate-cfg-mysql">
        <echo message="Updating hibernate.cfg.xml file for mysql..."/>
        <replace dir="${junit.classes.dir}" propertyfile="${basedir}/src/test/resources/DAOInstall.properties">
            <include name="hibernate.cfg.xml"/>
            <replacefilter token="@@dialect@@" value="${mysql.dialect.string}"/>
            <replacefilter token="@@driver@@" value="${mysql.driver.string}"/>
            <replacefilter token="@@url@@" value="jdbc:mysql://${database.host}:${database.port}/${database.name}"/>
            <replacefilter token="@@username@@" value="${database.username}"/>
            <replacefilter token="@@password@@" value="${database.password}"/>
        </replace>
    </target>

    <target name="update:hibernate-cfg-oracle">
        <echo message="Updating hibernate.cfg.xml file for oracle..."/>
        <replace dir="${junit.classes.dir}" propertyfile="${basedir}/src/test/resources/DAOInstall.properties">
            <include name="hibernate.cfg.xml"/>
            <replacefilter token="@@dialect@@" value="${oracle.dialect.string}"/>
            <replacefilter token="@@driver@@" value="${oracle.driver.string}"/>
            <replacefilter token="@@url@@" value="jdbc:oracle:thin:@${database.host}:${database.port}:${database.name}"/>
            <replacefilter token="@@username@@" value="${database.username}"/>
            <replacefilter token="@@password@@" value="${database.password}"/>
        </replace>

    </target>

    <target name="deploy:db">
        <if>
            <equals arg1="mysql" arg2="${database.type}"/>
            <then>
                <antcall target="create:deploy-db-mysql"/>
            </then>

            <elseif>
                <equals arg1="oracle" arg2="${database.type}"/>
                <then>
                    <antcall target="create:deploy-db-oracle"/>
                </then>
            </elseif>
            <else>
                <echo message="DATABASE INITIALIZATION FAILED PLEASE CHECK DATABASE.TYPE PROPERTY" level="error"/>
            </else>
        </if>
    </target>

    <target name="create:deploy-db-mysql">
        <antcall target="create:db-mysql"/>
        <antcall target="deploy:db-mysql"/>
    </target>

    <target name="create:db-oracle">
        <echo message="Initializing Oracle Database for caTISSUECore Client Application..."/>
            <sql
                    driver="${oracle.driver.string}"
                    url="jdbc:oracle:thin:@${database.host}:${database.port}:${database.name}"
                      userid="${database.tempusername}"
                    password="${database.temppassword}"
                       onerror="continue"
                    rdbms="oracle">
                    <classpath>
                        <fileset dir="${basedir}/lib">
                            <include name="*.jar"/>
                        </fileset>
                    </classpath>
                    DROP USER ${database.username} CASCADE;
                    CREATE USER ${database.username} IDENTIFIED BY ${database.password} DEFAULT TABLESPACE "${database.tablespace}" TEMPORARY TABLESPACE "${database.temptablespace}" QUOTA UNLIMITED ON "${database.tablespace}";
                    GRANT CONNECT, RESOURCE TO ${database.username};
                    GRANT DBA TO ${database.username};
                    ALTER USER ${database.username} DEFAULT ROLE ALL;
            </sql>
    </target>

    <target name="deploy:db-oracle">
                <echo message="Initializing Oracle Database for DAO..." />
                <sql driver="${oracle.driver.string}"
                    url="jdbc:oracle:thin:@${database.host}:${database.port}:${database.name}"
                    userid="${database.username}" password="${database.password}"
                    onerror="continue"
                    rdbms="oracle">
                    <transaction src="${basedir}/db/dbcreation_oracle.sql" />
                    <transaction>commit;</transaction>
                    <classpath>
                        <fileset dir="${basedir}/lib">
                            <include name="*.jar" />
                        </fileset>
                    </classpath>
                </sql>
    </target>

    <target name="create:deploy-db-oracle">
        <antcall target="create:db-oracle"/>
        <antcall target="deploy:db-oracle"/>
    </target>

    <target name="CodeCoverage">
        <antcall target="instrument"/>
        <antcall target="runJUnitTests"/>
        <antcall target="coverage-report"/>
    </target>

    <target name="create:db-mysql">
            <echo message="Creating Mysql Database..."/>
            <sql
                driver="${mysql.driver.string}"
                url="jdbc:mysql://${database.host}:${database.port}/mysql"
                userid="${database.username}"
                password="${database.password}"
                onerror="stop">
                <classpath>
                    <fileset dir="${basedir}/lib">
                          <include name="mysql-connector-java-5.0.8-bin.jar"/>
                    </fileset>
                </classpath>
                DROP DATABASE IF EXISTS ${database.name};
                CREATE DATABASE ${database.name};
            </sql>
    </target>

    <target name="deploy:db-mysql">
            <echo message="Initializing MySQL Database for DAO..." />
            <sql driver="${mysql.driver.string}" url="jdbc:mysql://${database.host}:${database.port}/${database.name}" userid="${database.username}" password="${database.password}" onerror="continue" >
                <transaction src="${basedir}/db/dbcreation_mysql.sql" />
                <transaction>commit;</transaction>
                <classpath>
                    <fileset dir="${basedir}/lib">
                        <include name="*.jar" />
                    </fileset>
                </classpath>
            </sql>
    </target>

<!--
    DAO
    <target name="instrument" depends="init, compile">
        <echo>Instrumenting the application classes : </echo>
            <delete file="${cobertura.location}/cobertura.ser"/>
            <cobertura-instrument todir="${test.instrumented.dir}">
                <classpath>
                    <fileset dir="${basedir}/src/lib">
                        <include name="**/*.jar"/>
                    </fileset>
                </classpath>
                <ignore regex="org.apache.log4j.*" />
                <fileset dir="${target.dir}/classes">
                    <include name="**/*.class" />
                </fileset>
            </cobertura-instrument>
    </target>
-->

    <target name="coverage-report">
        <echo> Generating coverage reports :</echo>
        <mkdir dir="${target.dir}/reports/daoCodeCoverageXml"/>
        <mkdir dir="${target.dir}/reports/daoCodeCoverageHtml"/>

        <!--
            Generate an XML file containing the coverage data using
            the "srcdir" attribute.
        -->

        <cobertura-report srcdir="${src.dir}" destdir="${target.dir}/reports/daoCodeCoverageXml" format="xml" />

        <!--
                Generate a series of HTML files containing the coverage
                data in a user-readable form using nested source filesets.
        -->
        <cobertura-report destdir="${target.dir}/reports/daoCodeCoverageHtml">
            <fileset dir="${src.dir}">
                <include name="**/*.java"/>
            </fileset>
        </cobertura-report>
    </target>


    <target name="runDAOReport" depends="runDAOTestCases">
        <echo>Executing Junit test cases : </echo>
       <junitreport todir="${target.dir}/reports/TestReports">
           <fileset dir="${target.dir}/reports/TestReports">
               <include name="TEST-*.xml" />
           </fileset>
           <report todir="${target.dir}/reports/TestReports/HtmlReports" />
       </junitreport>
   </target>

    <target name="runDAOTestCases" depends="instrument, compileTest">
        <echo>Executing DAO test cases : </echo>
        <mkdir dir="${target.dir}/reports/TestReports"/>
        <mkdir dir="${target.dir}/reports/TestReports/HtmlReports"/>

        <junit printsummary="yes" fork="yes">
            <formatter type="xml" />
             <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.location}/cobertura.ser" />

            <!--	Note the classpath order: instrumented classes are before the
                original (uninstrumented) classes.  This is important.
            -->

            <classpath location="${instrumented.classes.dir}" />
            <classpath location="${target.dir}/classes}" />

            <classpath>
                <fileset dir="${basedir}/lib">
                    <exclude name="DAO-1.1.5.jar"/>
                    <include name="*.jar"/>
                </fileset>
            </classpath>

            <classpath>
                <pathelement path="${project.test}/java" />
                <pathelement path= "${junit.classes.dir}" />
                <!--<pathelement path = "C:/Program Files/YourKit Java Profiler 7.0.11/bin/win32" />-->
            </classpath>

            <classpath refid="cobertura.classpath" />

            <batchtest fork="yes" todir="${target.dir}/reports/TestReports">
                <fileset dir="${project.test}/java">
                    <include name="**/DAOTestSuite.java" />
                </fileset>
            </batchtest>
        </junit>

    </target>

</project>